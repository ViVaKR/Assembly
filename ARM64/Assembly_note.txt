x86_64
ARM64 (aarch64)
i386


/*
 * ALU (Arithmetic Logic Unit)
 * Control Unit
 * IR Register :
 * ---------------
 * R0
 * R1
 * R2
 * R3
 * R4 : IR (Instruction Register)
 * R5 : SP (Stack Pointer)
 * R6 : IR (Link Register)
 * R7 : PC (Program Counter)
 *
 *
 * ---------------
 * Bus Interface
 * I/O BUS
 * <fetch>
 * Memory
 *
 * R0 ~ R3 : 연산할 값들을 담아 놓거나 혹은 ALU 에서 연산한 결과값을 담아 놓을 용도.
 * R4 : 들어온 명령어를 담아놓는 레지스터 (e.g. ADD R3, R1, R2 -> R1 과 R2를 연산한 값을 R3에 담아라)
 * R5 : 스택 포인터로 다음 명령어 처리에 필요한 가용 스택 주소를 가르킴, 스택을 반환하고 나면 FP의 주소롤 돌아감
 * R6 : Link Register 는 FP (Frame Pointer) 레지스터, 함수가 종료된 후 스택에 담긴 데이터를 반환할 때 돌아갈 스택의 위치를 저장
 * R7 : Program Counter 로 다음 명령어가 실행될 주소를 담아 놓는 레지스터.
 *
 * PUSH : 명령어는 데이터를 스택에 넣고자 할 때 사용함.
 * -> PUSH 0x02 --- 현재 SP 값을 참조하여 데이터 0x02 를 해당 위치에 저장
 * -> PUSH R1   --- 현재 SP 값을 참조해서 레지스터 R1 값ㅇ르 해당 위치에 저장
 *
 * POP : 스택에 가장 마지막에 들어간 데이터를 꺼내기 위해서 사용함.
 * SP 레지스터에 저장된 값을 감소시킴
 * POP 은 피연산자가 불필요하고 단순히 POP 형태로 명령어를 사용함.
 * -> ADD SP, SP, -4 --- 현재 SP 값에 -4를 더하여 SP 에 저장
 * -> SUB SP, SP,  4 --- 현재 SP 값에 4를 빼서 SP 에 저장
 *
 *
 *
 * ADD : 덧셈
 * SUB : 뺄셈
 * MUL : 곱셈
 * DIV : 나눗셈
 *
 * | 예약 | 연산자 | 저장소 | 피연산자 1 | 피연산자 2 |
 *
 * 예약 : 사용자가 사용할 지능 구분을 위해 남겨놓은 비트 구간
 *
 * 저장소는 항상 레지스터 고정
 * 피연산자는 레지스터 혹은 숫자 상수일 수 있다.
 *
 * 문제점 : 피연산자1, 2에 오는코드가 숫자인지 레지스터인지 식별하기 어려움.
 * 레지스터 값이 들어오면 레지스터 안에 저장된 데이터를 참조하겠다는 의미
 * 해결 : 4개의 비트 중 첫번째 비트에 1이 오면 레지스터, 0이 오면 숫자로 식별시킬수 있음.
 * 그러므로 실질적으로 표현할 수 있는 숫자는 3비트값, 피연산자 하나당 8, 즉 0 ~7 까지 밖에 되지 않음.
 * 그래서 STORE & LOAD 명령어의 개념을 도입해야 할 필요가 있음.
 *
 * => 메모리 주소에 값을 할당하고 그 주소를 LOAD 로 레지스터에 적재한 후 연산을 진행하고
 * 그 값을 다시 STORE 로 메모리에 적재해 놓는 방식으로 더 넓은 범위의 값을 표현 가능
 * int a = 10; // 0x10 번지에 할당
 * int b = 20; // 0x20 번지에 할당
 * int c = 0;  // 0x30 번지에 할당
 * c = a + b;
 *
 * LOAD r1, 0x10 // 0x10 번지에 저장된 데이터를 r1 로 이동
 * LOAD r2, 0x20 // 0x20 번지에 저장된 데이터를 r2 로 이동
 * ADD r3, r1, r2 // r1, r2 에 저장된 값을 더해서 r3 에 결과 저장
 * STORE r3, 0x30 // r3 에 저장된 값을 0x30 번지에 저장
 *
 */



```bash
dpkg --print-architecture
uname -m  : machine hardware name for ex, x86_64
uname -a  : stands for all (machine hardware name, processor type, hardware platform
```








